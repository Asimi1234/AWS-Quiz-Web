AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Quiz Backend with API Gateway, Lambda, DynamoDB, and JWT Auth
Parameters:
  SecretKey:
    Type: String
    Description: Secret key used for JWT authentication
Globals:
  Function:
    Timeout: 10
    Runtime: python3.11
Resources:
  QuizApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: '''OPTIONS,GET,POST'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
      Auth:
        DefaultAuthorizer: JWTAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          JWTAuthorizer:
            FunctionArn:
              Fn::GetAtt:
              - JWTAuthorizerFunction
              - Arn
            Identity:
              Header: Authorization
  JWTAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: JWTAuthorizerFunction
      Handler: app.lambda_handler
      Environment:
        Variables:
          SECRET_KEY:
            Ref: SecretKey
      Runtime: python3.11
    Metadata:
      SamResourceId: JWTAuthorizerFunction
  StartQuizFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: StartQuizFunction
      Handler: app.lambda_handler
      Events:
        GetQuestions:
          Type: Api
          Properties:
            Path: /start-quiz
            Method: get
            RestApiId:
              Ref: QuizApi
            Auth:
              Authorizer: JWTAuthorizer
    Metadata:
      SamResourceId: StartQuizFunction
  SubmitAnswerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SubmitAnswerFunction
      Handler: app.lambda_handler
      Events:
        Submit:
          Type: Api
          Properties:
            Path: /submit-answer
            Method: post
            RestApiId:
              Ref: QuizApi
            Auth:
              Authorizer: JWTAuthorizer
    Metadata:
      SamResourceId: SubmitAnswerFunction
  GetAnswers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetAnswers
      Handler: app.lambda_handler
      Events:
        GetAnswersAPI:
          Type: Api
          Properties:
            Path: /get-answer
            Method: GET
            RestApiId:
              Ref: QuizApi
            Auth:
              Authorizer: JWTAuthorizer
    Metadata:
      SamResourceId: GetAnswers
  UserAttemptsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UserAttemptsFunction
      Handler: app.lambda_handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName: QuizAttempts
      Environment:
        Variables:
          QUIZ_ATTEMPTS_TABLE: QuizAttempts
          SECRET_KEY:
            Ref: SecretKey
      Events:
        UserAttemptsGet:
          Type: Api
          Properties:
            Path: /user/attempts
            Method: get
            RestApiId:
              Ref: QuizApi
            Auth:
              Authorizer: JWTAuthorizer
        UserAttemptsPost:
          Type: Api
          Properties:
            Path: /user/attempts
            Method: post
            RestApiId:
              Ref: QuizApi
            Auth:
              Authorizer: JWTAuthorizer
    Metadata:
      SamResourceId: UserAttemptsFunction
  CheckAttemptsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CheckAttemptsFunction
      Handler: app.lambda_handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName: QuizAttempts
      Environment:
        Variables:
          QUIZ_ATTEMPTS_TABLE: QuizAttempts
          SECRET_KEY:
            Ref: SecretKey
      Events:
        CheckAttemptsAPI:
          Type: Api
          Properties:
            Path: /check-attempts
            Method: get
            RestApiId:
              Ref: QuizApi
            Auth:
              Authorizer: JWTAuthorizer
    Metadata:
      SamResourceId: CheckAttemptsFunction
  SubmitQuizFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SubmitQuizFunction
      Handler: app.lambda_handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName: QuizAttempts
      Environment:
        Variables:
          QUIZ_ATTEMPTS_TABLE: QuizAttempts
      Events:
        SubmitQuizAPI:
          Type: Api
          Properties:
            Path: /submit-quiz
            Method: post
            RestApiId:
              Ref: QuizApi
            Auth:
              Authorizer: JWTAuthorizer
    Metadata:
      SamResourceId: SubmitQuizFunction
  LeaderboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: LeaderboardFunction
      Handler: app.lambda_handler
      Policies:
      - DynamoDBReadPolicy:
          TableName: QuizAttempts
      - DynamoDBReadPolicy:
          TableName: Users
      Environment:
        Variables:
          QUIZ_ATTEMPTS_TABLE: QuizAttempts
      Events:
        LeaderboardAPI:
          Type: Api
          Properties:
            Path: /leaderboard
            Method: get
            RestApiId:
              Ref: QuizApi
    Metadata:
      SamResourceId: LeaderboardFunction
  UserLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UserLoginFunction
      Handler: app.lambda_handler
      Policies:
      - DynamoDBReadPolicy:
          TableName: Users
      Environment:
        Variables:
          SECRET_KEY:
            Ref: SecretKey
      Events:
        UserLoginAPI:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId:
              Ref: QuizApi
    Metadata:
      SamResourceId: UserLoginFunction
  UserSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UserSignupFunction
      Handler: app.lambda_handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Users
      Environment:
        Variables:
          SECRET_KEY:
            Ref: SecretKey
      Events:
        UserSignupAPI:
          Type: Api
          Properties:
            Path: /signup
            Method: post
            RestApiId:
              Ref: QuizApi
    Metadata:
      SamResourceId: UserSignupFunction
  RequestPasswordResetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: RequestPasswordResetFunction
      Handler: app.lambda_handler
      Policies:
      - DynamoDBReadPolicy:
          TableName: Users
      Environment:
        Variables:
          SECRET_KEY:
            Ref: SecretKey
      Events:
        RequestPasswordResetAPI:
          Type: Api
          Properties:
            Path: /request-password-reset
            Method: post
            RestApiId:
              Ref: QuizApi
    Metadata:
      SamResourceId: RequestPasswordResetFunction
  ResetPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ResetPasswordFunction
      Handler: app.lambda_handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Users
      Environment:
        Variables:
          SECRET_KEY:
            Ref: SecretKey
      Events:
        ResetPasswordAPI:
          Type: Api
          Properties:
            Path: /reset-password
            Method: post
            RestApiId:
              Ref: QuizApi
    Metadata:
      SamResourceId: ResetPasswordFunction
  CheckUserExistsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CheckUserExistsFunction
      Handler: app.lambda_handler
      Policies:
      - DynamoDBReadPolicy:
          TableName: Users
      Events:
        CheckUserExistsAPI:
          Type: Api
          Properties:
            Path: /check-user-exists
            Method: post
            RestApiId:
              Ref: QuizApi
    Metadata:
      SamResourceId: CheckUserExistsFunction
  GoogleAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GoogleAuthFunction
      Handler: app.lambda_handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Users
      Environment:
        Variables:
          GOOGLE_CLIENT_ID: ''
          SECRET_KEY:
            Ref: SecretKey
      Events:
        GoogleAuthAPI:
          Type: Api
          Properties:
            Path: /auth/google
            Method: post
            RestApiId:
              Ref: QuizApi
    Metadata:
      SamResourceId: GoogleAuthFunction
Outputs:
  QuizApiUrl:
    Description: API Gateway endpoint URL for Quiz API
    Value:
      Fn::Sub: https://${QuizApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-QuizApiUrl
  QuizAttemptsTableName:
    Description: DynamoDB table name for quiz attempts (existing table)
    Value: QuizAttempts
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-QuizAttemptsTableName
